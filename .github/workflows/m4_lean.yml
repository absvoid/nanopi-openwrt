name: m4 Lean版openwrt
on:  [push]

jobs:

  build:

    runs-on: ubuntu-18.04

    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y --no-install-recommends install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          curl https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh  | xargs sudo bash
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

      - name: Install Repo
        run: |
          git clone https://github.com/friendlyarm/repo
          sudo cp repo/repo /usr/bin/

      - name: Init Source
        run: |
          mkdir friendlywrt-rk3399
          cd friendlywrt-rk3399
          repo init -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v19.07.1 -m rk3399.xml --repo-url=https://github.com/friendlyarm/repo --no-clone-bundle --depth=1
          repo sync -c --no-tags --no-clone-bundle -j8
          cd friendlywrt/ && git fetch --unshallow

      - name: Install OpenClash
        run: |
          cd friendlywrt-rk3399/friendlywrt
          mkdir package/luci-app-openclash
          cd package/luci-app-openclash
          git init
          git remote add -f origin https://github.com/vernesong/OpenClash.git
          git config core.sparsecheckout true
          echo "luci-app-openclash" >> .git/info/sparse-checkout
          git pull origin master
          git branch --set-upstream-to=origin/master master
          cd luci-app-openclash/tools/po2lmo
          make && sudo make install

      - name: Install Clash Binaries
        run: |
          mkdir -p friendlywrt-rk3399/friendlywrt/package/base-files/files/etc/openclash/core
          cd friendlywrt-rk3399/friendlywrt/package/base-files/files/etc/openclash/core
          wget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-armv8-v0.19.0.gz
          gunzip clash-linux-armv8-v0.19.0.gz
          chmod +x clash-linux-armv8-v0.19.0
          mv clash-linux-armv8-v0.19.0 clash

      - name: Mods
        run: |
          cd friendlywrt-rk3399
          . ../remove_unused_config.sh
          cat configs/config_rk3399 | grep "TARGET" >> ../base_rk3399.seed
          cat ../app_config.seed >> ../base_rk3399.seed
          cat ../base_rk3399.seed > configs/config_rk3399
          echo '# CONFIG_V2RAY_COMPRESS_UPX is not set' >> configs/config_rk3399
          cd friendlywrt
          git config --local user.email "action@github.com" && git config --local user.name "GitHub Action"
          git remote add upstream https://github.com/coolsnowwolf/lede && git fetch upstream
          git rebase adc1a9a3676b8d7be1b48b5aed185a94d8e42728^ --onto upstream/master -X theirs
          git revert --no-edit 8faac30089ce616940b3e96c4f4d900aeb6b9fcb
          sed -i '/ipv6/,+3d' package/base-files/files/root/setup.sh
          git checkout upstream/master -- feeds.conf.default
          cd package/lean/
          #git clone https://github.com/jerrykuku/lua-maxminddb.git
          #git clone https://github.com/jerrykuku/luci-app-vssr.git
          #cd luci-app-vssr/root/etc/
          #echo 'china_ssr.txt
          #config/black.list
          #config/white.list
          #dnsmasq.oversea/oversea_list.conf
          #dnsmasq.ssr/ad.conf
          #dnsmasq.ssr/gfw_base.conf' | xargs rm
          #cd ../../../
          rm -rf luci-theme-argon
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          cd ../../
          git apply ../../enable_autocore.diff
          #git apply ../../fix_cpufreq.diff
          sed -i '/uci commit luci/i\uci set luci.main.mediaurlbase="/luci-static/argon"' package/lean/default-settings/files/zzz-default-settings
          sed -i '/exit/i\chown -R root:root /usr/share/netdata/web' package/lean/default-settings/files/zzz-default-settings
          sed -i '/exit/i\find /etc/rc.d/ -name *docker* -delete' package/lean/default-settings/files/zzz-default-settings
          sed -i 's/option fullcone\t1/option fullcone\t0/' package/network/config/firewall/files/firewall.config
          sed -i '/8.8.8.8/d' package/base-files/files/root/setup.sh
          mv ../../scripts/check_wan4.sh package/base-files/files/usr/bin && sed -i '/exit/i\/bin/sh /usr/bin/check_wan4.sh &' package/base-files/files/etc/rc.local
          echo -e '\nViNew Build\n'  >> package/base-files/files/etc/banner

      - name: set current_config.mk
        run: |
          cd friendlywrt-rk3399
          cp device/friendlyelec/rk3399/nanopi_m4.mk .current_config.mk

      - name: Build kernel
        run: |
          cd friendlywrt-rk3399
          ./build.sh kernel  

      - name: Build u-boot
        run: |
          cd friendlywrt-rk3399
          ./build.sh uboot                   

      - name: Build FriendlyWrt
        run: |
          cd friendlywrt-rk3399
          sed -i 's/set -eu/set -u/' scripts/mk-friendlywrt.sh
          ./build.sh friendlywrt 

      - name: Build sd-img 
        run: |
          cd friendlywrt-rk3399
          sudo ./build.sh sd-img
      
      - name: Build emmc-img 
        run: |
          cd friendlywrt-rk3399
          pushd scripts/sd-fuse
          wget https://github.com/vinewx/nanopi-openwrt/releases/download/eflasher/emmc-flasher-images.tgz
          mkdir eflasher
          tar xzvf emmc-flasher-images.tgz -C eflasher --strip-components=1
          popd
          sed -i '/download_img /d' scripts/sd-fuse/mk-emmc-image.sh
          sudo ./build.sh emmc-img

      - name: Zip Files
        run: |
          gzip friendlywrt-rk3399/out/*.img

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          mv friendlywrt-rk3399/out/*img* ./artifact/
          cp friendlywrt-rk3399/friendlywrt/.config ./artifact/
          emmc_path="./artifact/FriendlyWrt_$(date +%Y%m%d)_NanoPi-M4_arm64_eflasher.img.gz"
          emmc_name="FriendlyWrt_$(date +%Y%m%d)_NanoPi-M4_arm64_eflasher.img.gz"
          file_name="FriendlyWrt_$(date +%Y%m%d)_NanoPi-M4_arm64"
          release_tag="M4-Lean-$(date +%Y-%m-%d)"
          sd_path="./artifact/FriendlyWrt_$(date +%Y%m%d)_NanoPi-M4_arm64_sd.img.gz"
          sd_name="FriendlyWrt_$(date +%Y%m%d)_NanoPi-M4_arm64_sd.img.gz"
          echo "##[set-output name=emmc_path;]$emmc_path"
          echo "##[set-output name=emmc_name;]$emmc_name"         
          echo "##[set-output name=file_name;]$file_name"
          echo "##[set-output name=release_tag;]$release_tag"
          echo "##[set-output name=sd_path;]$sd_path"
          echo "##[set-output name=sd_name;]$sd_name"

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.assemble_artifact.outputs.file_name }}
          path: ./artifact/

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Upload SD Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.assemble_artifact.outputs.sd_path }}
          asset_name: ${{ steps.assemble_artifact.outputs.sd_name }}
          asset_content_type: application/gz

      - name: Upload EMMC Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.assemble_artifact.outputs.emmc_path }}
          asset_name: ${{ steps.assemble_artifact.outputs.emmc_name }}
          asset_content_type: application/gz
